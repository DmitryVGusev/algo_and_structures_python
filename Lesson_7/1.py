"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. По возможности доработайте алгоритм (сделайте его умнее).
"""
from random import randint
from timeit import timeit


def bubble_sort(m):
    """Сортировка пузырьком"""
    counts = 0
    for i in range(len(m)):
        for j in range(len(m)-i-1):
            counts += 1
            if m[j] > m[j+1]:
                m[j], m[j+1] = m[j+1], m[j]
    return m, counts


def bubble_improved(m):
    """Улучшенная сортироквка пузырьком"""
    counts = 0
    s = len(m) - 1
    for i in range(len(m)):
        j = 0

        if s > (len(m) - i - 1):
            end = (len(m) - i - 1)
        else:
            end = s

        while j < end:
            counts += 1
            if m[j] > m[j + 1]:
                if s < j:
                    s = end
                m[j], m[j + 1] = m[j + 1], m[j]
            else:
                if s == end:
                    s = j
            j += 1

    return m, counts


if __name__ == '__main__':

    N = 10
    mass = [randint(-100, 99) for _ in range(N)]
    mass = [-42, 81, 20, -99, -29, -58, 29, 62, 75, 90]

    print(f"Исходный массив: \n {mass}")

    print("Сортировка стандартным пузырьком (результат, количество проходов)")
    print(bubble_sort(mass.copy()))

    print("Сортировка улучшеным пузырьком (результат, количество проходов)")
    print(bubble_improved(mass.copy()))

    """
    Исходный массив: 
     [-42, 81, 20, -99, -29, -58, 29, 62, 75, 90]
    Сортировка стандартным пузырьком (результат, количество проходов)
    ([-99, -58, -42, -29, 20, 29, 62, 75, 81, 90], 45)
    Сортировка улучшеным пузырьком (результат, количество проходов)
    ([-99, -58, -42, -29, 20, 29, 62, 75, 81, 90], 26)
    """
